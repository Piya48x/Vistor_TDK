// src/slip/Report.jsx
import React, { useEffect, useState, useRef } from 'react'
import { supabase } from '../supabaseClient'
import ExcelJS from 'exceljs'
import { saveAs } from 'file-saver'
import { useNavigate } from 'react-router-dom'

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î user/pass ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
const USERNAME = 'admin'
const PASSWORD = '1234'

const ORG = import.meta.env.VITE_ORG_NAME || 'Just-iD Visitor'
const SITE = import.meta.env.VITE_SITE_NAME || 'Global Securitech'

export default function Report() {
  const [visitors, setVisitors] = useState([])
  const [searchDate, setSearchDate] = useState('')
  const [searchName, setSearchName] = useState('')
  const [searchPhone, setSearchPhone] = useState('')
  const [searchCompany, setSearchCompany] = useState('')
  const [selectedIds, setSelectedIds] = useState([])
  const printedIdsRef = useRef(new Set())
  const navigate = useNavigate()

  // Prompt login ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ (‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏∏‡∏î)
  useEffect(() => {
    const user = prompt('‡∏Å‡∏£‡∏≠‡∏Å Username:')
    const pass = prompt('‡∏Å‡∏£‡∏≠‡∏Å Password:')
    if (!(user === USERNAME && pass === PASSWORD)) {
      alert('‚ùå Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
      navigate('/') // ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
    }
  }, [navigate])

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö AND: date + name + phone + company)
  const loadVisitors = async (dateFilter = '', nameFilter = '', phoneFilter = '', companyFilter = '') => {
    let query = supabase
      .from('visitors')
      .select('*')
      .order('id', { ascending: false })
      .limit(200)

    if (dateFilter) {
      const start = new Date(dateFilter)
      start.setHours(0, 0, 0, 0)
      const end = new Date(dateFilter)
      end.setHours(23, 59, 59, 999)
      query = query
        .gte('checkin_time', start.toISOString())
        .lte('checkin_time', end.toISOString())
    }
    if (nameFilter) query = query.ilike('full_name', `%${nameFilter}%`)
    if (phoneFilter) query = query.ilike('phone', `%${phoneFilter}%`)
    if (companyFilter) query = query.ilike('company', `%${companyFilter}%`)

    const { data, error } = await query
    if (!error) setVisitors(data || [])
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  useEffect(() => {
    loadVisitors()
  }, [])

  // Realtime update
  useEffect(() => {
    const channel = supabase
      .channel('visitors-changes')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'visitors' },
        (payload) => {
          // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏î‡∏¢‡∏Ñ‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          loadVisitors(searchDate, searchName, searchPhone, searchCompany)

          // Auto-open print ‡πÉ‡∏ö‡πÉ‡∏´‡∏°‡πà (‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ printedIdsRef)
          if (payload.eventType === 'INSERT') {
            const newVisitor = payload.new
            if (newVisitor?.id && !printedIdsRef.current.has(newVisitor.id)) {
              printedIdsRef.current.add(newVisitor.id)
              window.open(`/print/${newVisitor.id}`, '_blank')
            }
          }
        }
      )
      .subscribe()

    return () => supabase.removeChannel(channel)
  }, [searchDate, searchName, searchPhone, searchCompany])

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
  const toggleSelect = (id) => {
    setSelectedIds((prev) =>
      prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]
    )
  }

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const toggleSelectAll = () => {
    if (selectedIds.length === visitors.length) setSelectedIds([])
    else setSelectedIds(visitors.map((v) => v.id))
  }

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå
  const checkOut = async (id) => {
    await supabase
      .from('visitors')
      .update({ checkout_time: new Date().toISOString() })
      .eq('id', id)
    loadVisitors(searchDate, searchName, searchPhone, searchCompany)
  }

  // ‡∏•‡∏ö (‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
  const deleteVisitor = async (ids) => {
    if (!ids.length) return alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô')
    if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) return
    await supabase.from('visitors').delete().in('id', ids)
    setSelectedIds([])
    loadVisitors(searchDate, searchName, searchPhone, searchCompany)
  }

  // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
  const resetFilters = () => {
    setSearchDate('')
    setSearchName('')
    setSearchPhone('')
    setSearchCompany('')
    loadVisitors('', '', '', '')
  }

  // Export Excel
  const exportToExcel = async (ids) => {
    const rows = ids.length ? visitors.filter((v) => ids.includes(v.id)) : visitors
    if (!rows.length) return alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô')

    const wb = new ExcelJS.Workbook()
    const ws = wb.addWorksheet('Visitors')

    ws.columns = [
      { header: 'ID', key: 'id', width: 12 },
      { header: '‡∏ä‡∏∑‡πà‡∏≠', key: 'full_name', width: 25 },
      { header: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', key: 'phone', width: 18 },
      { header: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', key: 'company', width: 22 },
      { header: '‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', key: 'contact_person', width: 20 },
      { header: '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤', key: 'checkin_time', width: 22 },
      { header: '‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å', key: 'checkout_time', width: 22 },
    ]

    // header style
    ws.getRow(1).font = { bold: true }
    ws.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' }

    for (const v of rows) {
      ws.addRow({
        id: String(v.id).padStart(10, '0'),
        full_name: v.full_name || '',
        phone: v.phone || '',
        company: v.company || '',
        contact_person: v.contact_person || '',
        checkin_time: v.checkin_time ? new Date(v.checkin_time).toLocaleString() : '',
        checkout_time: v.checkout_time ? new Date(v.checkout_time).toLocaleString() : '',
      })
    }

    const buf = await wb.xlsx.writeBuffer()
    saveAs(
      new Blob([buf], { type: 'application/octet-stream' }),
      `visitors_${new Date().toISOString().slice(0, 10)}.xlsx`
    )
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="noprint rounded-xl border bg-white/70 backdrop-blur p-4 md:p-5 shadow-sm">
        <div className="grid grid-cols-1 md:grid-cols-3 items-center gap-3 md:gap-4">
          <div className="inline-flex items-center gap-2 rounded-lg border border-blue-200 bg-blue-50 px-3 py-2 text-blue-800">
            <span className="text-base">üè¢</span>
            <span className="text-sm md:text-base">‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£: <b>{ORG}</b></span>
          </div>
          <div className="inline-flex items-center gap-2 rounded-lg border border-emerald-200 bg-emerald-50 px-3 py-2 text-emerald-800">
            <span className="text-base">üìç</span>
            <span className="text-sm md:text-base">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: <b>{SITE}</b></span>
          </div>
          <div className="md:col-start-3 flex justify-end">
            <button
              onClick={() => navigate('/')}
              className="custom-btn inline-flex items-center gap-2 rounded-lg bg-gray-700 px-5 py-2.5 text-white shadow hover:bg-gray-800 active:scale-[.98] transition"
            >
              <span className="text-lg">‚Ü©Ô∏è</span>
              <span className="font-medium">‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</span>
            </button>
          </div>
        </div>
      </div>

      {/* Search / Actions */}
      <div className="flex flex-wrap gap-3 items-center noprint">
        <input
          type="date"
          value={searchDate}
          onChange={(e) => setSearchDate(e.target.value)}
          className="border rounded px-3 py-2 shadow-sm"
        />
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠"
          value={searchName}
          onChange={(e) => setSearchName(e.target.value)}
          className="border rounded px-3 py-2 shadow-sm"
        />
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
          value={searchPhone}
          onChange={(e) => setSearchPhone(e.target.value)}
          className="border rounded px-3 py-2 shadow-sm"
        />
        <input
          type="text"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"
          value={searchCompany}
          onChange={(e) => setSearchCompany(e.target.value)}
          className="border rounded px-3 py-2 shadow-sm"
        />

        <button
          onClick={() => loadVisitors(searchDate, searchName, searchPhone, searchCompany)}
          className="custom-btn bg-blue-500 text-white px-4 py-2 rounded shadow hover:bg-blue-600"
        >
          ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        </button>

        <button
          onClick={() => resetFilters()}
          className="custom-btn bg-gray-100 px-4 py-2 rounded shadow hover:bg-gray-200"
        >
          ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
        </button>

        <button
          onClick={() => exportToExcel(selectedIds)}
          className="custom-btn bg-green-500 text-white px-4 py-2 rounded shadow hover:bg-green-600"
        >
          Export
        </button>

        <button
          onClick={() => deleteVisitor(selectedIds)}
          className="custom-btn bg-red-500 text-white px-4 py-2 rounded shadow hover:bg-red-600"
        >
          ‡∏•‡∏ö (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
        </button>
      </div>

      {/* Table */}
      <div className="overflow-x-auto noprint shadow rounded border">
        <table className="table-auto border-collapse w-full text-sm">
          <thead className="bg-indigo-600 text-white sticky top-0">
            <tr>
              <th className="border px-3 py-2 text-center">
                <input
                  type="checkbox"
                  checked={selectedIds.length === visitors.length && visitors.length > 0}
                  onChange={toggleSelectAll}
                />
              </th>
              <th className="border px-3 py-2">ID</th>
              <th className="border px-3 py-2">‡∏ä‡∏∑‡πà‡∏≠</th>
              <th className="border px-3 py-2">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
              <th className="border px-3 py-2">‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó</th>
              <th className="border px-3 py-2">‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</th>
              <th className="border px-3 py-2">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤</th>
              <th className="border px-3 py-2">‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å</th>
              <th className="border px-3 py-2">‡∏û‡∏¥‡∏°‡∏û‡πå</th>
              <th className="border px-3 py-2">‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå</th>
              <th className="border px-3 py-2">‡∏•‡∏ö</th>
            </tr>
          </thead>
          <tbody>
            {visitors.map((v) => (
              <tr
                key={v.id}
                className={`hover:bg-gray-50 ${selectedIds.includes(v.id) ? 'bg-yellow-50' : ''}`}
              >
                <td className="border px-3 py-2 text-center">
                  <input
                    type="checkbox"
                    checked={selectedIds.includes(v.id)}
                    onChange={() => toggleSelect(v.id)}
                  />
                </td>
                <td className="border px-3 py-2">{v.id}</td>
                <td className="border px-3 py-2">{v.full_name}</td>
                <td className="border px-3 py-2">{v.phone || ''}</td>
                <td className="border px-3 py-2">{v.company || ''}</td>
                <td className="border px-3 py-2">{v.contact_person || ''}</td>
                <td className="border px-3 py-2">
                  {v.checkin_time ? new Date(v.checkin_time).toLocaleString() : ''}
                </td>
                <td className="border px-3 py-2">
                  {v.checkout_time ? (
                    new Date(v.checkout_time).toLocaleString()
                  ) : (
                    <span className="text-gray-200">‚Äî</span>
                  )}
                </td>
                <td className="border px-3 py-2 text-center">
                  <a className="bg-gray-200 px-3 py-1 rounded hover:bg-gray-300" href={`/print/${v.id}`} target="_blank">
                    ‡∏û‡∏¥‡∏°‡∏û‡πå
                  </a>
                </td>
                <td className="border px-3 py-2 text-center">
                  {!v.checkout_time ? (
                    <button
                      className="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600"
                      onClick={() => checkOut(v.id)}
                    >
                      ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå
                    </button>
                  ) : (
                    <span className="text-green-500 font-bold">‚úî ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</span>
                  )}
                </td>
                <td className="border px-3 py-2 text-center">
                  <button
                    className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
                    onClick={() => deleteVisitor([v.id])}
                  >
                    ‡∏•‡∏ö
                  </button>
                </td>
              </tr>
            ))}
            {visitors.length === 0 && (
              <tr>
                <td colSpan={11} className="text-center text-gray-500 py-6">
                  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  )
}
