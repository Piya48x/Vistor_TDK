import React, { useEffect, useRef, useState } from 'react'
import { supabase } from './supabaseClient'
import { DEFAULT_FIELDS } from './config'
import QRCode from 'qrcode'
import { useNavigate } from 'react-router-dom'


const ORG = import.meta.env.VITE_ORG_NAME || 'Just-iD Visitor'
const SITE = import.meta.env.VITE_SITE_NAME || 'Global Securitech'

export default function App() {
  // const [fields, setFields] = useState(DEFAULT_FIELDS)
  const [fields, setFields] = useState({
    full_name: true,
    company: true,
    phone: true,
    contact_person: true,
    purpose: true,
    ...DEFAULT_FIELDS
  })
 const [form, setForm] = useState({
    id_type: 'citizen',
    id_number: '',
    full_name: '',
    gender: '',
    company: '',
    phone: '',
    contact_person: '',
    purpose: '',
    vehicle_plate: '',
    vehicle_type: '',
    chip_serial: '',
    note: ''
  })

  const [errors, setErrors] = useState({})
  const [photoDataUrl, setPhotoDataUrl] = useState('')
  const [loading, setLoading] = useState(false)
  const [visitors, setVisitors] = useState([])
  const videoRef = useRef(null)
  const streamRef = useRef(null)
  const navigate = useNavigate()

  // Init webcam
  useEffect(() => {
    (async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false })
        streamRef.current = stream
        if (videoRef.current) { videoRef.current.srcObject = stream }
      } catch (err) { console.warn('camera error', err) }
    })()
    return () => { if (streamRef.current) { streamRef.current.getTracks().forEach(t => t.stop()) } }
  }, [])

  // Load visitors
  const loadVisitors = async () => {
    const { data, error } = await supabase.from('visitors').select('*').order('id', { ascending: false }).limit(50)
    if (!error) setVisitors(data || [])
  }
  useEffect(() => { loadVisitors() }, [])

  // Realtime subscribe
  useEffect(() => {
    const channel = supabase.channel('visitors-changes')
      .on('postgres_changes', { event: '*', schema: 'public', table: 'visitors' }, payload => { loadVisitors() })
      .subscribe()
    return () => { supabase.removeChannel(channel) }
  }, [])

  const takeSnapshot = () => {
    const video = videoRef.current
    if (!video) return
    const cv = document.createElement('canvas')
    cv.width = video.videoWidth || 640
    cv.height = video.videoHeight || 480
    const ctx = cv.getContext('2d')
    ctx.drawImage(video, 0, 0, cv.width, cv.height)
    const url = cv.toDataURL('image/jpeg', 0.9)
    setPhotoDataUrl(url)
  }

  const uploadPhoto = async (visitorId) => {
    if (!photoDataUrl) return null
    const blob = await (await fetch(photoDataUrl)).blob()
    const filePath = `photos/${visitorId}.jpg`
    const { error } = await supabase.storage.from('photos').upload(filePath, blob, {
      contentType: 'image/jpeg', upsert: true
    })
    if (error) { console.error('upload error', error); return null }
    const { data } = supabase.storage.from('photos').getPublicUrl(filePath)
    return data?.publicUrl || null
  }

  const savePhoto = async () => {
    if (!photoDataUrl) return alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡πà‡∏≠‡∏ô!')
    setLoading(true)
    try {
      const fileName = form.id_number ? `${form.id_number}.jpg` : `${Date.now()}.jpg`
      const blob = await (await fetch(photoDataUrl)).blob()
      const { error } = await supabase.storage.from('photos').upload(`photos/${fileName}`, blob, { contentType: 'image/jpeg', upsert: true })
      if (error) throw error
      const { data } = supabase.storage.from('photos').getPublicUrl(`photos/${fileName}`)
      alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! URL: ' + data.publicUrl)
    } catch (err) {
      console.error(err)
      alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + err.message)
    } finally { setLoading(false) }
  }

  const onSubmit = async (e) => {
    e.preventDefault();
    // setLoading(true);

       // ‚úÖ Validate ‡∏Å‡πà‡∏≠‡∏ô
   const newErrors = {}
   if (!form.full_name.trim()) newErrors.full_name = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
   if (!form.company.trim()) newErrors.company = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ï‡πâ‡∏ô‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î"
   if (!form.phone.trim()) newErrors.phone = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
   if (!form.contact_person.trim()) newErrors.contact_person = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô"
   if (!form.purpose.trim()) newErrors.purpose = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå"
   setErrors(newErrors)
   if (Object.keys(newErrors).length > 0) return

   setLoading(true);


    try {
      // 1Ô∏è‚É£ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö insert
      const payload = {
        ...form,
        checkin_time: new Date().toISOString(),
        checkout_time: null,
        photo_url: null,
        qr_data: null,
      };

      // 2Ô∏è‚É£ Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Supabase
      const { data, error } = await supabase
        .from('visitors')
        .insert(payload)
        .select()
        .single();
      if (error) throw error;

      // 3Ô∏è‚É£ Upload ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      let photoUrl = null;
      if (photoDataUrl) {
        const blob = await (await fetch(photoDataUrl)).blob();
        const fileName = `${data.id}.jpg`;
        const { error: uploadError } = await supabase.storage
          .from('photos')
          .upload(`photos/${fileName}`, blob, { contentType: 'image/jpeg', upsert: true });
        if (uploadError) throw uploadError;

        const { data: publicData } = supabase.storage
          .from('photos')
          .getPublicUrl(`photos/${fileName}`);
        photoUrl = publicData?.publicUrl || null;

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó photo_url
        if (photoUrl) {
          await supabase.from('visitors').update({ photo_url: photoUrl }).eq('id', data.id);
        }
      }

      // 4Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR code ‡πÄ‡∏õ‡πá‡∏ô URL ‚Üí /visitor/:id
      const BASE_URL = import.meta.env.VITE_BASE_URL || window.location.origin;
      const qrUrl = `${BASE_URL}/visitor/${data.id}`;
      const qrDataUrl = await QRCode.toDataURL(qrUrl);



      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï QR ‡πÉ‡∏´‡πâ‡∏°‡∏µ id ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      const qrFinal = await QRCode.toDataURL(JSON.stringify({ id: data.id, id_number: form.id_number, time: new Date().toISOString() }))
      await supabase.from('visitors').update({ qr_data: qrFinal }).eq('id', data.id)

      // 6Ô∏è‚É£ Reset form + ‡∏£‡∏π‡∏õ
      setForm({
        id_type: 'citizen',
        id_number: '',
        full_name: '',
        gender: '',
        company: '',
        phone: '',
        contact_person: '',
        purpose: '',
        vehicle_plate: '',
        vehicle_type: '',
        chip_serial: '',
        note: ''
      });
      setPhotoDataUrl('');

      // 7Ô∏è‚É£ ‡πÇ‡∏´‡∏•‡∏î visitor ‡πÉ‡∏´‡∏°‡πà
      await loadVisitors();

      // 8Ô∏è‚É£ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏™‡∏•‡∏¥‡∏õ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
      window.open(`/print/${data.id}`, '_blank');

      // alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! QR code ‡πÄ‡∏õ‡πá‡∏ô URL ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πÅ‡∏Å‡∏ô');
    } catch (err) {
      console.error(err);
      alert('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const checkOut = async (id) => {
    await supabase.from('visitors').update({ checkout_time: new Date().toISOString() }).eq('id', id)
    loadVisitors()
  }

  const readCard = async () => {
    try {
      const res = await fetch('http://localhost:12345/read-card'); // local server ‡∏Ç‡∏≠‡∏á card reader
      if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏î‡πâ');
      const data = await res.json();

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï form ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£
      setForm(f => ({
        ...f,
        id_number: data.id_number || '',
        full_name: data.full_name || '',
        gender: data.gender || '',
        // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏ä‡πà‡∏ô birthdate
        note: `‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: ${data.birthdate || ''}`
      }));

      alert('‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    } catch (err) {
      console.error('‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', err);
      alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏ö');
    }
  };


  return (
    <div className="container">
      {/* Header */}
      <div className="row noprint" style={{ marginBottom: 12 }}>
        <div className="badge">‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£: <b>{ORG}</b></div>
        <div className="badge">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: <b>{SITE}</b></div>
        <div className="badge">‡∏Å‡∏•‡πâ‡∏≠‡∏á: <span className="kbd">‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï</span> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û</div>
        <button type="button" className="btn outline" style={{ marginLeft: 'auto' }} onClick={() => navigate('/Report')}>üìä Export ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</button>
      </div>

      <div className="grid noprint">
        {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô */}
        <div className="card">
          <h2>‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏°‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ (Check-in)</h2>
          <form
      className="max-w-md mx-auto bg-white p-6 rounded-2xl shadow-md space-y-4"
      onSubmit={onSubmit}
    >
      {fields.full_name && (
        <div className="space-y-1">
          <label className="block font-medium">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
          <input
            className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
            value={form.full_name}
            onChange={(e) =>
              setForm((f) => ({ ...f, full_name: e.target.value }))
            }
            
          /><small className="text-sm text-gray-500">
            * ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏à‡∏£‡∏¥‡∏á
          </small>
          {errors.full_name && (
            <small className="text-sm text-red-500">{errors.full_name}</small>
          )}
          
        </div>
      )}

      {fields.company && (
        <div className="space-y-1">
          <label className="block font-medium">‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ï‡πâ‡∏ô‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î</label>
          <input
            className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
            value={form.company}
            onChange={(e) =>
              setForm((f) => ({ ...f, company: e.target.value }))
            }
          />
          {errors.company && (
            <small className="text-sm text-red-500">{errors.company}</small>
          )}
          <small className="text-sm text-gray-500">
            * ‡πÄ‡∏ä‡πà‡∏ô Just-iD, Global Securitech
          </small>
        </div>
      )}

      {fields.phone && (
        <div className="space-y-1">
          <label className="block font-medium">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
          <input
            className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
            value={form.phone}
            onChange={(e) =>
              setForm((f) => ({ ...f, phone: e.target.value }))
            }
          />
          {errors.phone && (
            <small className="text-sm text-red-500">{errors.phone}</small>
          )}
          <small className="text-sm text-gray-500">
            * ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
          </small>
        </div>
      )}

      {fields.contact_person && (
        <div className="space-y-1">
          <label className="block font-medium">‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô</label>
          <input
            className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
            value={form.contact_person}
            onChange={(e) =>
              setForm((f) => ({ ...f, contact_person: e.target.value }))
            }
          />
          {errors.contact_person && (
            <small className="text-sm text-red-500">
              {errors.contact_person}
            </small>
          )}
          <small className="text-sm text-gray-500">
            * ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
          </small>
        </div>
      )}

      {fields.purpose && (
        <div className="space-y-1">
          <label className="block font-medium">‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå</label>
          <input
            className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
            value={form.purpose}
            onChange={(e) =>
              setForm((f) => ({ ...f, purpose: e.target.value }))
            }
          />
          {errors.purpose && (
            <small className="text-sm text-red-500">{errors.purpose}</small>
          )}
          <small className="text-sm text-gray-500">
            * ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á, ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°, ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°
          </small>
        </div>
      )}

      <div className="pt-4">
      <button
  className="btn"
  disabled={loading}
>
  {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å & ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏™‡∏•‡∏¥‡∏õ"}
</button>
      </div>
    </form>
        </div>

        {/* ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏° ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á */}
        {/* <div className="card" style={{ marginTop: 16 }}>
          <h2>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏° (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å)</h2>
          <div className="row" style={{ gap: 12 }}>
            {Object.keys(fields).map(k => (
              <label key={k} style={{ display: 'flex', alignItems: 'center', gap: 8, border: '1px solid #eee', padding: 6, borderRadius: 10 }}>
                <input type="checkbox" checked={fields[k]} onChange={() => setFields(prev => ({ ...prev, [k]: !prev[k] }))} />
                <span>{k}</span>
              </label>
            ))}
          </div>
          <div style={{ marginTop: 14 }}>
            <p className="badge">‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏û‡∏®/‡πÄ‡∏•‡∏Ç‡∏ä‡∏¥‡∏õ ‡∏Å‡πá‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ</p>
          </div>

        </div> */}
      </div>
    </div>
  )
}
